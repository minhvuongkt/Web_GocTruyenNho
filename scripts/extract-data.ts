import { 
  users, 
  genres, 
  authors, 
  translationGroups, 
  content, 
  contentGenres, 
  chapters,
  chapterContent,
  payments,
  paymentSettings,
  advertisements,
  comments,
  reports,
  readingHistory,
  userFavorites,
  unlockedChapters
} from "../shared/schema";
import { db } from "../server/db";
import { eq } from "drizzle-orm";
import * as fs from 'fs';
import * as path from 'path';

// Function ƒë·ªÉ tr·∫£ v·ªÅ gi√° tr·ªã an to√†n JSON
function safeJSON(obj: any): any {
  if (obj === null || obj === undefined) {
    return null;
  }

  if (obj instanceof Date) {
    return obj.toISOString();
  }

  if (Array.isArray(obj)) {
    return obj.map(safeJSON);
  }

  if (typeof obj === 'object') {
    const result: any = {};
    for (const key in obj) {
      if (Object.prototype.hasOwnProperty.call(obj, key)) {
        result[key] = safeJSON(obj[key]);
      }
    }
    return result;
  }

  return obj;
}

// H√†m ƒë·ªÉ l∆∞u d·ªØ li·ªáu v√†o file
function saveToFile(fileName: string, data: any) {
  const dir = path.join(__dirname, 'backup');
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
  }
  
  const filePath = path.join(dir, fileName);
  fs.writeFileSync(filePath, JSON.stringify(safeJSON(data), null, 2));
  console.log(`‚úÖ ƒê√£ l∆∞u d·ªØ li·ªáu v√†o ${filePath}`);
}

async function exportData() {
  console.log("üîÑ B·∫Øt ƒë·∫ßu tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu...");
  
  try {
    // Ki·ªÉm tra k·∫øt n·ªëi database
    console.log("üîç Ki·ªÉm tra k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu...");
    await db.select().from(users).limit(1);
    console.log("‚úÖ K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng!");
    
    // Tr√≠ch xu·∫•t d·ªØ li·ªáu t·ª´ng b·∫£ng
    console.log("üîÑ ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu ng∆∞·ªùi d√πng...");
    const allUsers = await db.select().from(users);
    saveToFile('users.json', allUsers);
    
    console.log("üîÑ ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu th·ªÉ lo·∫°i...");
    const allGenres = await db.select().from(genres);
    saveToFile('genres.json', allGenres);
    
    console.log("üîÑ ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu t√°c gi·∫£...");
    const allAuthors = await db.select().from(authors);
    saveToFile('authors.json', allAuthors);
    
    console.log("üîÑ ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu nh√≥m d·ªãch...");
    const allGroups = await db.select().from(translationGroups);
    saveToFile('translation_groups.json', allGroups);
    
    console.log("üîÑ ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu truy·ªán...");
    const allContent = await db.select().from(content);
    saveToFile('content.json', allContent);
    
    console.log("üîÑ ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu li√™n k·∫øt th·ªÉ lo·∫°i-truy·ªán...");
    const allContentGenres = await db.select().from(contentGenres);
    saveToFile('content_genres.json', allContentGenres);
    
    console.log("üîÑ ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu ch∆∞∆°ng truy·ªán...");
    const allChapters = await db.select().from(chapters);
    saveToFile('chapters.json', allChapters);
    
    console.log("üîÑ ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu n·ªôi dung ch∆∞∆°ng...");
    const allChapterContent = await db.select().from(chapterContent);
    saveToFile('chapter_content.json', allChapterContent);
    
    console.log("üîÑ ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu thanh to√°n...");
    const allPayments = await db.select().from(payments);
    saveToFile('payments.json', allPayments);
    
    console.log("üîÑ ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu c√†i ƒë·∫∑t thanh to√°n...");
    const allPaymentSettings = await db.select().from(paymentSettings);
    saveToFile('payment_settings.json', allPaymentSettings);
    
    console.log("üîÑ ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu qu·∫£ng c√°o...");
    const allAds = await db.select().from(advertisements);
    saveToFile('advertisements.json', allAds);
    
    console.log("üîÑ ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu b√¨nh lu·∫≠n...");
    const allComments = await db.select().from(comments);
    saveToFile('comments.json', allComments);
    
    console.log("üîÑ ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu b√°o c√°o...");
    const allReports = await db.select().from(reports);
    saveToFile('reports.json', allReports);
    
    console.log("üîÑ ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu l·ªãch s·ª≠ ƒë·ªçc...");
    const allReadingHistory = await db.select().from(readingHistory);
    saveToFile('reading_history.json', allReadingHistory);
    
    console.log("üîÑ ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu truy·ªán y√™u th√≠ch...");
    const allFavorites = await db.select().from(userFavorites);
    saveToFile('user_favorites.json', allFavorites);
    
    console.log("üîÑ ƒêang tr√≠ch xu·∫•t d·ªØ li·ªáu ch∆∞∆°ng ƒë√£ m·ªü kh√≥a...");
    const allUnlockedChapters = await db.select().from(unlockedChapters);
    saveToFile('unlocked_chapters.json', allUnlockedChapters);
    
    // T·∫°o file t·ªïng h·ª£p
    console.log("üîÑ ƒêang t·∫°o file SQL ƒë·ªÉ t√°i t·∫°o d·ªØ li·ªáu...");
    
    // T·∫°o SQL ƒë·ªÉ t√°i t·∫°o
    let sqlScript = `-- Script t·ª± ƒë·ªông t·∫°o t·ª´ script extract-data.ts
-- Ng√†y t·∫°o: ${new Date().toISOString()}
-- L∆∞u √Ω: Ch·∫°y script n√†y s·∫Ω X√ìA d·ªØ li·ªáu hi·ªán c√≥ v√† thay th·∫ø b·∫±ng d·ªØ li·ªáu sao l∆∞u

-- T·∫°o l·∫°i enum types
DO $$
BEGIN
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role') THEN
    CREATE TYPE user_role AS ENUM ('user', 'admin');
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'content_type') THEN
    CREATE TYPE content_type AS ENUM ('manga', 'novel');
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'status') THEN
    CREATE TYPE status AS ENUM ('ongoing', 'completed', 'hiatus');
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'payment_method') THEN
    CREATE TYPE payment_method AS ENUM ('bank_transfer', 'credit_card', 'e_wallet', 'payos');
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'payment_status') THEN
    CREATE TYPE payment_status AS ENUM ('pending', 'completed', 'failed');
  END IF;
  
  IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'ad_position') THEN
    CREATE TYPE ad_position AS ENUM ('banner', 'sidebar', 'popup');
  END IF;
END
$$;

-- X√≥a d·ªØ li·ªáu hi·ªán c√≥ ƒë·ªÉ tr√°nh conflict
TRUNCATE TABLE unlocked_chapters CASCADE;
TRUNCATE TABLE user_favorites CASCADE;
TRUNCATE TABLE reading_history CASCADE;
TRUNCATE TABLE reports CASCADE;
TRUNCATE TABLE comments CASCADE;
TRUNCATE TABLE chapter_content CASCADE;
TRUNCATE TABLE chapters CASCADE;
TRUNCATE TABLE content_genres CASCADE;
TRUNCATE TABLE content CASCADE;
TRUNCATE TABLE translation_groups CASCADE;
TRUNCATE TABLE authors CASCADE;
TRUNCATE TABLE genres CASCADE;
TRUNCATE TABLE payments CASCADE;
TRUNCATE TABLE advertisements CASCADE;
TRUNCATE TABLE payment_settings CASCADE;
TRUNCATE TABLE users CASCADE;

-- Thi·∫øt l·∫≠p sequence cho t·ª´ng b·∫£ng
`;

    // Th√™m c√°c l·ªánh t√°i t·∫°o d·ªØ li·ªáu
    sqlScript += `\n-- ƒêo·∫°n script d∆∞·ªõi ƒë√¢y s·∫Ω ƒë∆∞·ª£c t·ª± ƒë·ªông t·∫°o t·ª´ d·ªØ li·ªáu ƒë√£ tr√≠ch xu·∫•t...\n`;
    sqlScript += `-- B·∫°n c√≥ th·ªÉ d√πng tool sau ƒë·ªÉ t·∫°o INSERT statement t·ª´ file JSON ƒë√£ sao l∆∞u:\n`;
    sqlScript += `-- https://www.convertjson.com/json-to-sql.htm\n`;

    saveToFile('recreate_database.sql', sqlScript);

    console.log("‚úÖ Ho√†n th√†nh qu√° tr√¨nh tr√≠ch xu·∫•t d·ªØ li·ªáu!");
    console.log("üìä Th√¥ng tin t·ªïng quan:");
    
    console.log(`üë§ S·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng: ${allUsers.length}`);
    console.log(`üìö S·ªë l∆∞·ª£ng truy·ªán: ${allContent.length}`);
    console.log(`üìë S·ªë l∆∞·ª£ng chapter: ${allChapters.length}`);
    console.log(`üí∞ S·ªë l∆∞·ª£ng giao d·ªãch: ${allPayments.length}`);
    
    console.log(`üìÅ T·∫•t c·∫£ d·ªØ li·ªáu ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o th∆∞ m·ª•c: ${path.join(__dirname, 'backup')}`);
    
  } catch (error) {
    console.error("‚ùå L·ªói khi tr√≠ch xu·∫•t d·ªØ li·ªáu:", error);
  }
}

// Ch·∫°y script
exportData()
  .then(() => {
    console.log("üéâ Script th·ª±c thi th√†nh c√¥ng!");
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå Script g·∫∑p l·ªói:", error);
    process.exit(1);
  });