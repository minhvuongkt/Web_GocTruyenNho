import { 
  users, 
  genres, 
  authors, 
  translationGroups, 
  content, 
  contentGenres, 
  chapters,
  chapterContent,
  payments,
  paymentSettings,
  advertisements
} from "../shared/schema";
import { db, pool } from "../server/db";
import { hashPassword } from "../server/auth";
import { eq } from "drizzle-orm";

async function populateDatabase() {
  console.log("üîÑ B·∫Øt ƒë·∫ßu t·∫°o c∆° s·ªü d·ªØ li·ªáu v√† d·ªØ li·ªáu m·∫´u...");

  try {
    // Ki·ªÉm tra k·∫øt n·ªëi database
    console.log("üîç Ki·ªÉm tra k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu...");
    await db.select().from(users).limit(1);
    console.log("‚úÖ K·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng!");
  } catch (error) {
    console.error("‚ùå L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu:", error);
    console.log("üîÑ ƒêang t·∫°o c·∫•u tr√∫c c∆° s·ªü d·ªØ li·ªáu...");
    
    // S·ª≠ d·ª•ng raw SQL ƒë·ªÉ t·∫°o enum types tr∆∞·ªõc
    const client = await pool.connect();
    try {
      // T·∫°o enum types
      await client.query(`
        DO $$
        BEGIN
          IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'user_role') THEN
            CREATE TYPE user_role AS ENUM ('user', 'admin');
          END IF;
          
          IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'content_type') THEN
            CREATE TYPE content_type AS ENUM ('manga', 'novel');
          END IF;
          
          IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'status') THEN
            CREATE TYPE status AS ENUM ('ongoing', 'completed', 'hiatus');
          END IF;
          
          IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'payment_method') THEN
            CREATE TYPE payment_method AS ENUM ('bank_transfer', 'credit_card', 'e_wallet', 'payos');
          END IF;
          
          IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'payment_status') THEN
            CREATE TYPE payment_status AS ENUM ('pending', 'completed', 'failed');
          END IF;
          
          IF NOT EXISTS (SELECT 1 FROM pg_type WHERE typname = 'ad_position') THEN
            CREATE TYPE ad_position AS ENUM ('banner', 'sidebar', 'popup');
          END IF;
        END
        $$;
      `);
      console.log("‚úÖ ƒê√£ t·∫°o enum types");
    } catch (err) {
      console.error("‚ùå L·ªói khi t·∫°o enum types:", err);
    } finally {
      client.release();
    }
  }

  // T·∫°o tables s·ª≠ d·ª•ng Drizzle
  console.log("üîÑ ƒêang t·∫°o tables...");

  // T·∫°o users
  console.log("üîÑ T·∫°o ng∆∞·ªùi d√πng...");
  const adminPassword = await hashPassword("admin123");
  const userPassword = await hashPassword("user123");
  
  try {
    const existingAdmin = await db.select().from(users).where(eq(users.username, "admin")).limit(1);
    
    if (existingAdmin.length === 0) {
      await db.insert(users).values([
        {
          username: "admin",
          password: adminPassword,
          email: "admin@example.com",
          role: "admin",
          firstName: "Admin",
          lastName: "User",
          balance: 1000000,
          isActive: true,
        },
        {
          username: "user",
          password: userPassword,
          email: "user@example.com",
          role: "user",
          firstName: "Normal",
          lastName: "User",
          balance: 50000,
          isActive: true,
        },
      ]);
      console.log("‚úÖ ƒê√£ t·∫°o ng∆∞·ªùi d√πng m·∫´u");
    } else {
      console.log("‚ÑπÔ∏è Ng∆∞·ªùi d√πng admin ƒë√£ t·ªìn t·∫°i, b·ªè qua b∆∞·ªõc t·∫°o");
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o ng∆∞·ªùi d√πng:", error);
  }

  // T·∫°o th·ªÉ lo·∫°i
  console.log("üîÑ T·∫°o th·ªÉ lo·∫°i...");
  try {
    const existingGenres = await db.select().from(genres).limit(1);
    
    if (existingGenres.length === 0) {
      await db.insert(genres).values([
        { name: "H√†nh ƒë·ªông", description: "Th·ªÉ lo·∫°i c√≥ nhi·ªÅu c·∫£nh h√†nh ƒë·ªông" },
        { name: "Phi√™u l∆∞u", description: "Th·ªÉ lo·∫°i phi√™u l∆∞u, kh√°m ph√°" },
        { name: "H√†i h∆∞·ªõc", description: "Th·ªÉ lo·∫°i c√≥ nhi·ªÅu y·∫øu t·ªë h√†i h∆∞·ªõc" },
        { name: "L√£ng m·∫°n", description: "Th·ªÉ lo·∫°i t√¨nh c·∫£m, l√£ng m·∫°n" },
        { name: "Kinh d·ªã", description: "Th·ªÉ lo·∫°i kinh d·ªã, ma qu√°i" },
        { name: "Vi·ªÖn t∆∞·ªüng", description: "Th·ªÉ lo·∫°i khoa h·ªçc vi·ªÖn t∆∞·ªüng" },
      ]);
      console.log("‚úÖ ƒê√£ t·∫°o c√°c th·ªÉ lo·∫°i m·∫´u");
    } else {
      console.log("‚ÑπÔ∏è Th·ªÉ lo·∫°i ƒë√£ t·ªìn t·∫°i, b·ªè qua b∆∞·ªõc t·∫°o");
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o th·ªÉ lo·∫°i:", error);
  }

  // T·∫°o t√°c gi·∫£
  console.log("üîÑ T·∫°o t√°c gi·∫£...");
  try {
    const existingAuthors = await db.select().from(authors).limit(1);
    
    if (existingAuthors.length === 0) {
      await db.insert(authors).values([
        { name: "Nguy·ªÖn Nh·∫≠t √Ånh", info: "T√°c gi·∫£ truy·ªán thi·∫øu nhi", birthDate: "1955-05-07" },
        { name: "Fujiko F. Fujio", info: "T√°c gi·∫£ Doraemon", birthDate: "1933-12-01" },
        { name: "Eiichiro Oda", info: "T√°c gi·∫£ One Piece", birthDate: "1975-01-01" },
      ]);
      console.log("‚úÖ ƒê√£ t·∫°o c√°c t√°c gi·∫£ m·∫´u");
    } else {
      console.log("‚ÑπÔ∏è T√°c gi·∫£ ƒë√£ t·ªìn t·∫°i, b·ªè qua b∆∞·ªõc t·∫°o");
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o t√°c gi·∫£:", error);
  }

  // T·∫°o nh√≥m d·ªãch
  console.log("üîÑ T·∫°o nh√≥m d·ªãch...");
  try {
    const existingGroups = await db.select().from(translationGroups).limit(1);
    
    if (existingGroups.length === 0) {
      await db.insert(translationGroups).values([
        { name: "LxErs", description: "Nh√≥m d·ªãch manga" },
        { name: "Kira Team", description: "Nh√≥m d·ªãch light novel" },
        { name: "VnSharing", description: "C·ªông ƒë·ªìng chia s·∫ª truy·ªán" },
      ]);
      console.log("‚úÖ ƒê√£ t·∫°o c√°c nh√≥m d·ªãch m·∫´u");
    } else {
      console.log("‚ÑπÔ∏è Nh√≥m d·ªãch ƒë√£ t·ªìn t·∫°i, b·ªè qua b∆∞·ªõc t·∫°o");
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o nh√≥m d·ªãch:", error);
  }

  // T·∫°o content
  console.log("üîÑ T·∫°o n·ªôi dung truy·ªán...");
  try {
    const existingContent = await db.select().from(content).limit(1);
    
    if (existingContent.length === 0) {
      const contentItems = [
        {
          title: "Truy·ªán 1",
          alternativeTitles: "Truy·ªán M·ªôt, Story One",
          description: "ƒê√¢y l√† m√¥ t·∫£ cho truy·ªán s·ªë 1",
          type: "manga",
          status: "ongoing",
          releaseYear: 2023,
          coverImage: "https://placehold.co/600x800",
          authorId: 1,
          views: 1200,
          rating: 4.5,
          isActive: true,
          isPremium: false,
          translationGroupId: 1,
        },
        {
          title: "Truy·ªán 2",
          alternativeTitles: "Truy·ªán Hai, Story Two",
          description: "ƒê√¢y l√† m√¥ t·∫£ cho truy·ªán s·ªë 2",
          type: "novel",
          status: "completed",
          releaseYear: 2021,
          coverImage: "https://placehold.co/600x800",
          authorId: 2,
          views: 850,
          rating: 4.2,
          isActive: true,
          isPremium: true,
          translationGroupId: 2,
        },
      ];
      
      for (const item of contentItems) {
        const [newContent] = await db.insert(content).values(item).returning({ id: content.id });
        
        // Th√™m th·ªÉ lo·∫°i cho truy·ªán
        if (newContent.id === 1) {
          await db.insert(contentGenres).values([
            { contentId: newContent.id, genreId: 1 }, // H√†nh ƒë·ªông
            { contentId: newContent.id, genreId: 2 }, // Phi√™u l∆∞u
          ]);
        } else if (newContent.id === 2) {
          await db.insert(contentGenres).values([
            { contentId: newContent.id, genreId: 4 }, // L√£ng m·∫°n
            { contentId: newContent.id, genreId: 6 }, // Vi·ªÖn t∆∞·ªüng
          ]);
        }
        
        // T·∫°o m·ªôt s·ªë chapter cho m·ªói truy·ªán
        const chapterCount = newContent.id === 1 ? 5 : 3;
        
        for (let i = 1; i <= chapterCount; i++) {
          const [newChapter] = await db
            .insert(chapters)
            .values({
              contentId: newContent.id,
              number: i,
              title: `Chapter ${i}`,
              views: Math.floor(Math.random() * 500),
              isPremium: i > 3, // T·ª´ chapter 4 tr·ªü ƒëi l√† premium
              price: i > 3 ? 5 : 0, // Chi ph√≠ cho chapter premium
              isActive: true,
            })
            .returning({ id: chapters.id });
          
          // T·∫°o n·ªôi dung cho chapter
          await db.insert(chapterContent).values({
            chapterId: newChapter.id,
            content: `N·ªôi dung c·ªßa chapter ${i} thu·ªôc truy·ªán ${newContent.id}. ƒê√¢y l√† n·ªôi dung m·∫´u.`,
          });
        }
      }
      
      console.log("‚úÖ ƒê√£ t·∫°o n·ªôi dung truy·ªán v√† chapter m·∫´u");
    } else {
      console.log("‚ÑπÔ∏è N·ªôi dung truy·ªán ƒë√£ t·ªìn t·∫°i, b·ªè qua b∆∞·ªõc t·∫°o");
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o n·ªôi dung truy·ªán:", error);
  }

  // T·∫°o giao d·ªãch m·∫´u
  console.log("üîÑ T·∫°o giao d·ªãch m·∫´u...");
  try {
    const existingPayments = await db.select().from(payments).limit(1);
    
    if (existingPayments.length === 0) {
      // T·∫°o m·ªôt s·ªë giao d·ªãch m·∫´u
      await db.insert(payments).values([
        {
          userId: 1, // admin
          transactionId: "TX" + Date.now().toString().substring(0, 8),
          amount: 100000,
          method: "bank_transfer",
          status: "completed",
          createdAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 ng√†y tr∆∞·ªõc
        },
        {
          userId: 2, // user
          transactionId: "TX" + (Date.now() - 100000).toString().substring(0, 8),
          amount: 50000,
          method: "payos",
          status: "completed",
          createdAt: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000), // 3 ng√†y tr∆∞·ªõc
        },
        {
          userId: 2, // user
          transactionId: "TX" + (Date.now() - 200000).toString().substring(0, 8),
          amount: 25000,
          method: "payos",
          status: "failed",
          createdAt: new Date(Date.now() - 1 * 24 * 60 * 60 * 1000), // 1 ng√†y tr∆∞·ªõc
        },
      ]);
      console.log("‚úÖ ƒê√£ t·∫°o giao d·ªãch m·∫´u");
    } else {
      console.log("‚ÑπÔ∏è Giao d·ªãch ƒë√£ t·ªìn t·∫°i, b·ªè qua b∆∞·ªõc t·∫°o");
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o giao d·ªãch m·∫´u:", error);
  }

  // T·∫°o c√†i ƒë·∫∑t thanh to√°n
  console.log("üîÑ T·∫°o c√†i ƒë·∫∑t thanh to√°n...");
  try {
    const existingSettings = await db.select().from(paymentSettings).limit(1);
    
    if (existingSettings.length === 0) {
      await db.insert(paymentSettings).values({
        bankConfig: {
          enabled: true,
          accountNumber: "0123456789",
          accountName: "CONG TY TNHH GOC TRUYEN NHO",
          bankName: "Vietcombank",
          bankBranch: "Ho Chi Minh",
          transferContent: "NAP_{username}"
        },
        vietQRConfig: {
          enabled: true,
          accountNumber: "0123456789",
          accountName: "CONG TY TNHH GOC TRUYEN NHO",
          bankId: "VCB",
          template: "compact2"
        },
        payosConfig: {
          enabled: true,
          clientId: process.env.PAYOS_CLIENT_ID || "",
          apiKey: process.env.PAYOS_API_KEY || "",
          checksumKey: process.env.PAYOS_CHECKSUM_KEY || "",
          baseUrl: "https://api-merchant.payos.vn"
        },
        priceConfig: {
          coinConversionRate: 1000, // 1000 VND = 1 xu
          minimumDeposit: 10000,
          chapterUnlockPrice: 5,
          discountTiers: [
            { amount: 50000, discountPercent: 5 },
            { amount: 100000, discountPercent: 10 },
            { amount: 200000, discountPercent: 15 },
          ]
        },
        emailConfig: {
          smtpHost: "smtp.gmail.com",
          smtpPort: 587,
          smtpUser: "",
          smtpPass: "",
          senderEmail: "",
          adminEmail: "admin@example.com"
        },
        expiryConfig: {
          bankTransfer: 10, // 10 ph√∫t cho chuy·ªÉn kho·∫£n ng√¢n h√†ng
          payos: 15, // 15 ph√∫t cho PayOS
        }
      });
      console.log("‚úÖ ƒê√£ t·∫°o c√†i ƒë·∫∑t thanh to√°n m·∫´u");
    } else {
      console.log("‚ÑπÔ∏è C√†i ƒë·∫∑t thanh to√°n ƒë√£ t·ªìn t·∫°i, b·ªè qua b∆∞·ªõc t·∫°o");
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o c√†i ƒë·∫∑t thanh to√°n:", error);
  }

  // T·∫°o qu·∫£ng c√°o m·∫´u
  console.log("üîÑ T·∫°o qu·∫£ng c√°o m·∫´u...");
  try {
    const existingAds = await db.select().from(advertisements).limit(1);
    
    if (existingAds.length === 0) {
      const now = new Date();
      const oneMonthLater = new Date();
      oneMonthLater.setMonth(oneMonthLater.getMonth() + 1);
      
      await db.insert(advertisements).values([
        {
          title: "Banner Qu·∫£ng C√°o",
          imageUrl: "https://placehold.co/1200x300/orange/white?text=BANNER+QUANG+CAO",
          targetUrl: "https://example.com/promo",
          position: "banner",
          startDate: now,
          endDate: oneMonthLater,
          isActive: true,
          views: 0,
          clicks: 0,
        },
        {
          title: "Qu·∫£ng C√°o B√™n C·∫°nh",
          imageUrl: "https://placehold.co/300x600/blue/white?text=SIDEBAR+AD",
          targetUrl: "https://example.com/sidebar-promo",
          position: "sidebar",
          startDate: now,
          endDate: oneMonthLater,
          isActive: true,
          views: 0,
          clicks: 0,
        },
      ]);
      console.log("‚úÖ ƒê√£ t·∫°o qu·∫£ng c√°o m·∫´u");
    } else {
      console.log("‚ÑπÔ∏è Qu·∫£ng c√°o ƒë√£ t·ªìn t·∫°i, b·ªè qua b∆∞·ªõc t·∫°o");
    }
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o qu·∫£ng c√°o m·∫´u:", error);
  }

  console.log("‚úÖ Ho√†n th√†nh qu√° tr√¨nh t·∫°o d·ªØ li·ªáu!");
  console.log("üìä Th√¥ng tin t·ªïng quan:");
  
  try {
    const userCount = await db.select({ count: sql`count(*)` }).from(users);
    const contentCount = await db.select({ count: sql`count(*)` }).from(content);
    const chapterCount = await db.select({ count: sql`count(*)` }).from(chapters);
    const paymentCount = await db.select({ count: sql`count(*)` }).from(payments);
    
    console.log(`üë§ S·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng: ${userCount[0]?.count || 0}`);
    console.log(`üìö S·ªë l∆∞·ª£ng truy·ªán: ${contentCount[0]?.count || 0}`);
    console.log(`üìë S·ªë l∆∞·ª£ng chapter: ${chapterCount[0]?.count || 0}`);
    console.log(`üí∞ S·ªë l∆∞·ª£ng giao d·ªãch: ${paymentCount[0]?.count || 0}`);
  } catch (error) {
    console.error("‚ùå L·ªói khi l·∫•y th·ªëng k√™:", error);
  }
}

// B·ªï sung sql helper function
function sql(strings: TemplateStringsArray, ...values: any[]) {
  return { strings, values };
}

// Ch·∫°y script
populateDatabase()
  .then(() => {
    console.log("üéâ Script th·ª±c thi th√†nh c√¥ng!");
    process.exit(0);
  })
  .catch((error) => {
    console.error("‚ùå Script g·∫∑p l·ªói:", error);
    process.exit(1);
  });