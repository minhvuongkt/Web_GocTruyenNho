import { pool } from "../server/db";

async function resetDatabase() {
  console.log("‚ö†Ô∏è B·∫Øt ƒë·∫ßu qu√° tr√¨nh x√≥a t·∫•t c·∫£ d·ªØ li·ªáu trong c∆° s·ªü d·ªØ li·ªáu...");
  
  try {
    const client = await pool.connect();
    
    try {
      // B·∫Øt ƒë·∫ßu transaction
      await client.query('BEGIN');
      
      console.log("üîÑ X√≥a t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ t·∫•t c·∫£ c√°c b·∫£ng...");
      
      // Danh s√°ch c√°c b·∫£ng c·∫ßn x√≥a theo th·ª© t·ª± ph√π h·ª£p (ƒë·ªÉ tr√°nh l·ªói kh√≥a ngo·∫°i)
      const tables = [
        "unlocked_chapters",
        "user_favorites",
        "reading_history",
        "reports",
        "comments",
        "chapter_content",
        "chapters",
        "content_genres",
        "content",
        "translation_groups",
        "authors",
        "genres",
        "payments",
        "advertisements",
        "payment_settings",
        "sessions",
        "users"
      ];
      
      // T·∫Øt t·∫°m th·ªùi c√°c r√†ng bu·ªôc kh√≥a ngo·∫°i
      await client.query('SET CONSTRAINTS ALL DEFERRED');
      
      // X√≥a d·ªØ li·ªáu t·ª´ t·∫•t c·∫£ c√°c b·∫£ng
      for (const table of tables) {
        try {
          await client.query(`TRUNCATE TABLE ${table} CASCADE`);
          console.log(`‚úÖ ƒê√£ x√≥a d·ªØ li·ªáu t·ª´ b·∫£ng ${table}`);
        } catch (err) {
          console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ x√≥a b·∫£ng ${table}: ${err.message}`);
        }
      }
      
      // Reset t·∫•t c·∫£ c√°c sequence
      console.log("üîÑ ƒê·∫∑t l·∫°i c√°c sequence ID...");
      
      const sequencesResult = await client.query(`
        SELECT sequence_name
        FROM information_schema.sequences
        WHERE sequence_schema = 'public'
      `);
      
      for (const row of sequencesResult.rows) {
        const sequenceName = row.sequence_name;
        try {
          await client.query(`ALTER SEQUENCE ${sequenceName} RESTART WITH 1`);
          console.log(`‚úÖ ƒê√£ ƒë·∫∑t l·∫°i sequence ${sequenceName}`);
        } catch (err) {
          console.warn(`‚ö†Ô∏è Kh√¥ng th·ªÉ ƒë·∫∑t l·∫°i sequence ${sequenceName}: ${err.message}`);
        }
      }
      
      // K·∫øt th√∫c transaction
      await client.query('COMMIT');
      console.log("‚úÖ ƒê√£ x√≥a th√†nh c√¥ng t·∫•t c·∫£ d·ªØ li·ªáu t·ª´ c∆° s·ªü d·ªØ li·ªáu");
      
    } catch (err) {
      // Rollback n·∫øu c√≥ l·ªói
      await client.query('ROLLBACK');
      console.error("‚ùå L·ªói trong qu√° tr√¨nh x√≥a d·ªØ li·ªáu:", err);
      throw err;
    } finally {
      client.release();
    }
    
  } catch (error) {
    console.error("‚ùå L·ªói k·∫øt n·ªëi c∆° s·ªü d·ªØ li·ªáu:", error);
    throw error;
  }
}

// Ch·∫°y script ch·ªâ khi ƒë∆∞·ª£c g·ªçi tr·ª±c ti·∫øp
if (require.main === module) {
  // Y√™u c·∫ßu x√°c nh·∫≠n t·ª´ ng∆∞·ªùi d√πng
  process.stdout.write("‚ö†Ô∏è  C·∫¢NH B√ÅO: Script n√†y s·∫Ω X√ìA T·∫§T C·∫¢ D·ªÆ LI·ªÜU trong c∆° s·ªü d·ªØ li·ªáu.\n");
  process.stdout.write("‚ö†Ô∏è  ƒê·∫£m b·∫£o b·∫°n ƒë√£ sao l∆∞u d·ªØ li·ªáu quan tr·ªçng tr∆∞·ªõc khi ti·∫øp t·ª•c.\n");
  process.stdout.write("‚ö†Ô∏è  Nh·∫≠p 'DELETE' ƒë·ªÉ x√°c nh·∫≠n: ");
  
  process.stdin.once('data', async (data) => {
    const input = data.toString().trim();
    
    if (input === 'DELETE') {
      try {
        await resetDatabase();
        console.log("üéâ Reset c∆° s·ªü d·ªØ li·ªáu th√†nh c√¥ng!");
        process.exit(0);
      } catch (error) {
        console.error("‚ùå Reset c∆° s·ªü d·ªØ li·ªáu th·∫•t b·∫°i:", error);
        process.exit(1);
      }
    } else {
      console.log("‚ùå H·ªßy thao t√°c x√≥a d·ªØ li·ªáu.");
      process.exit(0);
    }
  });
} else {
  // Xu·∫•t h√†m ƒë·ªÉ c√≥ th·ªÉ s·ª≠ d·ª•ng trong c√°c script kh√°c
  module.exports = resetDatabase;
}